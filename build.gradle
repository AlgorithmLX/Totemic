plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'net.darkhax.curseforgegradle' version '1.1.15'
    id 'com.modrinth.minotaur' version '2.+'
}

version = mod_version
group = 'pokefenn.totemic'

base {
    archivesName = 'Totemic-forge'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mappings_channel, version: mappings_version

    copyIdeResources = true

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                totemic { sources sourceSets.main, sourceSets.test }
            }
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        
        data {
            workingDirectory project.file('run-data')

            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://maven.blamejared.com' }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    
    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:1.19.2-77:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:1.20.2-77")
}

tasks.named('processResources', ProcessResources).configure {
    //TODO
    /*var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }*/
}

task apiSrcJar(type: Jar) {
    from(sourceSets.main.java) {
        include 'pokefenn/totemic/api/**'
    }
    archiveAppendix = 'api'
    archiveClassifier = 'sources'
}

artifacts {
    archives apiSrcJar
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Specification-Title": "totemic",
            "Specification-Vendor": "ljfa",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor": "ljfa",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    finalizedBy 'reobfJar'
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    apiToken = findProperty('curseForgeApiKey')
    
    def mainFile = upload(237541, jar)
    mainFile.releaseType = mod_release_type
    mainFile.changelog = file('changelog.md')
    mainFile.changelogType = 'markdown'
    mainFile.addRequirement('patchouli')
    
    def apiSrcFile = mainFile.withAdditionalFile(apiSrcJar)
}

modrinth {
    token = findProperty('modrinthApiToken')
    projectId = 'fenns_totemic'
    versionType = mod_release_type
    uploadFile = jar
    changelog = file('changelog.md').text
    dependencies {
        required.project 'patchouli'
    }
    additionalFiles = [apiSrcJar]
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
